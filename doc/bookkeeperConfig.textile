Title:        BookKeeper Administrator's Guide
Notice: Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License. You may
        obtain a copy of the License at "http://www.apache.org/licenses/LICENSE-2.0":http://www.apache.org/licenses/LICENSE-2.0.
        .
        .        
        Unless required by applicable law or agreed to in writing,
        software distributed under the License is distributed on an "AS IS"
        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
        implied. See the License for the specific language governing permissions
        and limitations under the License.
        .
        .

h1. Abstract

This document contains information about deploying, administering and mantaining BookKeeper. It also discusses best practices and common problems. 

As BookKeeper is still a prototype, this article is likely to change significantly over time. 

h1. System requirements

p. A typical BookKeeper installation comprises a set of bookies and a set of ZooKeeper replicas. The exact number of bookies depends on the quorum mode, desired throughput, and number of clients using this installation simultaneously. The minimum number of bookies is three for self-verifying (stores a message authentication code along with each entry) and four for generic (does not store a message authentication codewith each entry), and there is no upper limit on the number of bookies. Increasing the number of bookies, in fact, enables higher throughput. 

p. For performance, we require each server to have at least two disks. It is possible to run a bookie with a single disk, but performance will be significantly lower in this case. Of course, it works with one disk, but performance is significantly lower. 

p. For ZooKeeper, there is no constraint with respect to the number of replicas. Having a single machine running ZooKeeper in standalone mode is sufficient for BookKeeper. For resilience purposes, it might be a good idea to run ZooKeeper in quorum mode with multiple servers. Please refer to the ZooKeeper documentation for detail on how to configure ZooKeeper with multiple replicas 

h1. Running bookies

p. To run a bookie, we execute the following command: 

 @ bookkeeper-server/bin/bookkeeper bookie

p. The configuration parameters, which can be set in bookkeeper-server/conf/bkenv.sh

* BOOKIE_PORT: Port number that the bookie listens on; 
* BOOKIE_ZOOKEEPER: Comma separated list of ZooKeeper servers with a hostname:port format; 
* BOOKIE_TXN_LOGDIR: Path for Log Device (stores bookie write-ahead log); 
* BOOKIE_DATA_DIR: Path for Ledger Device (stores ledger entries); 

p. Ideally, @/path_to_log_device/@ and @/path_to_ledger_device/@ are each in a different device. 

h1. Bookie Configuration

p. Bookie server stores its data in multiple ledger directories and its journal files in a journal directory. Ideally, storing journal files in a separate directory than data files would increase throughput and decrease latency.

h2. Journal Configuration

p. Journal directory has one kind of files in it:

* {timestamp}.txn - holds transactions executed in the bookie server.

p. Before persisting ledger index and data to disk, a bookie ensures that the transaction that represents the update is written to a journal in non-volatile storage. A new journal file is created using current timestamp when a bookie starts or an old journal file reaches its maximum size.

p. A bookie supports journal rolling to remove old journal files. In order to remove old journal files safely, bookie server records LastLogMark in Ledger Device, which indicates all updates (including index and data) before LastLogMark has been persisted to the Ledger Device.

p. LastLogMark contains two parts:

* LastLogId - indicates which journal file the transaction persisted.
* LastLogPos - indicates the position the transaction persisted in LastLogId journal file.

p. You may use following settings to further fine tune the behavior of your Bookie servers. Currently these configuration settings are set using Java system properties.

* journalMaxSizeMB
** journal file size limitation. when a journal reaches this limitation, it will be closed and new journal file be created.

* journalMaxBackups
** how many old journal files whose id is less than LastLogMark 's journal id.

bq. NOTE: keeping number of old journal files would be useful for manually recovery in special case.

h1. ZooKeeper Metadata

p. For BookKeeper, we require a ZooKeeper installation to store metadata, and to pass the list of ZooKeeper servers as parameter to the constructor of the BookKeeper class ( @org.apache.bookkeeper.client,BookKeeper@ ). To setup ZooKeeper, please check the "ZooKeeper documentation":index.html. 